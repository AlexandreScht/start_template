// server.ts (Serveur Node.js en TypeScript)
import jwt from 'jsonwebtoken';
import { Server, Socket } from 'socket.io';
import { signData, verifyData } from './utils/crypto';
import { PrivateMessageSchema, PublicMessageSchema } from './utils/schemas';

// Interfaces TypeScript pour typer les √©v√©nements Socket.IO c√¥t√© client et serveur
interface UserData {
  id: string;
  name: string;
}
interface SocketData {
  user?: UserData;
}
interface ClientToServerEvents {
  // Le client envoie un message public (payload valid√© par PublicMessageSchema)
  public_message: (msg: { text: string }) => void;
  // Le client envoie un message priv√© (payload valid√© par PrivateMessageSchema)
  private_message: (msg: { to: string; text: string }) => void;
}
interface ServerToClientEvents {
  // Le serveur envoie un message public (apr√®s l'avoir sign√©)
  public_message: (msg: { data: { text: string; from: string }; sig: string }) => void;
  // Le serveur envoie un message priv√© (apr√®s l'avoir sign√©)
  private_message: (msg: { data: { text: string; from: string }; sig: string }) => void;
  // On pourrait ajouter d'autres √©v√©nements (ex: notifications d'erreur personnalis√©es) si n√©cessaire
}

// Configuration des secrets (√† s√©curiser en production via des variables d'environnement)
const HMAC_SECRET = process.env.HMAC_SECRET || 'CHANGE_THIS_SECRET'; // Secret partag√© pour HMAC (ne pas hardcoder en prod)
const JWT_SECRET = process.env.JWT_SECRET || 'JWT_SECRET_KEY'; // Secret pour signer/v√©rifier les JWT (√† d√©finir en prod)

// Initialisation du serveur Socket.IO sur le port 3000
const io = new Server<ClientToServerEvents, ServerToClientEvents, {}, SocketData>(3000, {
  cors: { origin: '*' }, // Autoriser toutes les origines pour l'exemple. En production, restreindre √† votre domaine client.
});

console.log('Serveur Socket.IO d√©marr√© sur le port 3000');

// Middleware global d'authentification (handshake) : v√©rifie le token JWT fourni lors de la connexion
io.use((socket, next) => {
  const token = socket.handshake.auth?.token;
  if (token) {
    try {
      // V√©rifier le token JWT et attacher les informations d'utilisateur au socket
      const decoded = jwt.verify(token, JWT_SECRET) as any;
      const user: UserData = { id: decoded.id, name: decoded.name };
      socket.data.user = user;
      // Joindre le socket √† une "room" identifi√©e par l'ID utilisateur, pour faciliter l'√©mission de messages priv√©s vers cet utilisateur
      socket.join(user.id);
      console.log(`‚úÖ Utilisateur authentifi√© : ${user.name} (id=${user.id})`);
    } catch (err) {
      console.error('‚ùå √âchec de la v√©rification du JWT :', err);
      // Refuser la connexion si le token est invalide
      return next(new Error("√âchec d'authentification")); // Le client recevra un √©v√©nement "connect_error"
    }
  }
  // Pas de token fourni -> utilisateur non authentifi√© (invit√©). On continue sans attacher de user.
  return next();
});

// Gestion d'une nouvelle connexion client
io.on('connection', socket => {
  const user = socket.data.user;
  if (user) {
    console.log(`üîó Socket connect√© pour l'utilisateur authentifi√© ${user.name} (${user.id})`);
  } else {
    console.log('üîó Socket connect√© pour un utilisateur invit√© (non authentifi√©)');
  }

  // Middleware de v√©rification de la signature HMAC pour chaque message entrant du client
  socket.use((packet, next) => {
    const [event, message] = packet;
    // On s'attend √† recevoir un objet { data: ..., sig: ... } pour chaque message
    if (!message || typeof message !== 'object' || !message.data || !message.sig) {
      return next(new Error('Format de message invalide ou signature manquante'));
    }
    // V√©rifier la signature du message √† l'aide du secret HMAC partag√©
    const isValid = verifyData(message.data, HMAC_SECRET, message.sig);
    if (!isValid) {
      return next(new Error('Signature de message invalide')); // Le client recevra un √©v√©nement "error"
    }
    // Si la signature est valide, remplacer le contenu du paquet par les donn√©es r√©elles (pour les prochains middlewares et handlers)
    packet[1] = message.data;
    return next();
  });

  // Middleware de validation des donn√©es avec Zod pour chaque message entrant (apr√®s la v√©rification de signature)
  socket.use((packet, next) => {
    const [event, data] = packet;
    let parseResult;
    if (event === 'public_message') {
      parseResult = PublicMessageSchema.safeParse(data);
    } else if (event === 'private_message') {
      parseResult = PrivateMessageSchema.safeParse(data);
    } else {
      // √âv√©nement non reconnu par notre protocole - on le rejette
      return next(new Error(`√âv√©nement non support√© : "${event}"`));
    }
    if (!parseResult.success) {
      console.error(`‚ùå Sch√©ma invalide pour ${event} :`, parseResult.error);
      return next(new Error('Donn√©es du message invalides'));
    }
    // Donn√©es valides selon le sch√©ma, on peut √©ventuellement utiliser parseResult.data (identique √† data ici)
    packet[1] = parseResult.data;
    return next();
  });

  // Middleware de contr√¥le d'acc√®s : v√©rifie que l'utilisateur est authentifi√© pour les √©v√©nements sensibles
  socket.use((packet, next) => {
    const [event, data] = packet;
    if (event === 'private_message') {
      if (!socket.data.user) {
        // Si un invit√© tente d'envoyer un message priv√©, on refuse
        return next(new Error('Authentification requise pour cet √©v√©nement'));
      }
    }
    return next();
  });

  // Handler de l'√©v√©nement "public_message" (message public envoy√© par un client)
  socket.on('public_message', payload => {
    // √Ä ce stade, le payload a √©t√© valid√© et v√©rifi√©. On peut le traiter en toute confiance.
    const senderName = socket.data.user ? socket.data.user.name : 'Anonyme';
    console.log(`üì® Message public re√ßu de ${senderName} : "${payload.text}"`);

    // Pr√©parer le message √† diffuser √† tous les clients (texte + nom de l'√©metteur)
    const outgoingData = { text: payload.text, from: senderName };
    // Signer le message avec le secret HMAC
    const signature = signData(outgoingData, HMAC_SECRET);
    // Envoyer √† tous les clients le message sign√© (y compris √† l'exp√©diteur, pour simplicit√©)
    io.emit('public_message', { data: outgoingData, sig: signature });
    // En production, on pourrait utiliser socket.broadcast.emit pour ne pas renvoyer √† l'exp√©diteur si ce n'est pas n√©cessaire c√¥t√© UI.
  });

  // Handler de l'√©v√©nement "private_message" (message priv√© envoy√© par un client authentifi√©)
  socket.on('private_message', payload => {
    const sender = socket.data.user!; // Ce handler n'est appel√© que si user existe (middleware d'auth l'a garanti)
    console.log(`üì® Message priv√© de ${sender.name} vers [id=${payload.to}] : "${payload.text}"`);

    // Pr√©parer le message √† envoyer au destinataire (texte + nom de l'exp√©diteur)
    const outgoingData = { text: payload.text, from: sender.name };
    const signature = signData(outgoingData, HMAC_SECRET);
    // √âmettre le message priv√© **seulement** au client cible dont l'ID correspond (s'il est connect√© sur une "room" du m√™me id)
    io.to(payload.to).emit('private_message', { data: outgoingData, sig: signature });
    // üí° Remarque : on utilise ici socket.join(user.id) plus haut pour que chaque utilisateur ait une "room" d√©di√©e (nomm√©e par son id).
    // Ainsi io.to(payload.to) enverra uniquement au socket du destinataire correspondant √† cet id.
  });

  // G√©rer la d√©connexion du client
  socket.on('disconnect', () => {
    if (socket.data.user) {
      console.log(`‚ùé D√©connexion de l'utilisateur ${socket.data.user.name} (${socket.data.user.id})`);
    } else {
      console.log("‚ùé D√©connexion d'un utilisateur non authentifi√©");
    }
    // (Socket.IO g√®re automatiquement la sortie du socket de toutes les rooms auxquelles il √©tait associ√©)
  });
});
